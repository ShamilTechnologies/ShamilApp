// Top-level build file where you can add configuration options common to all sub-projects/modules.

// Define properties accessible by the app and plugins
ext {
    compileSdkVersion = 34     // Define compile SDK version
    minSdkVersion = 23         // Required by firebase_auth (minimum 23)
    targetSdkVersion = 34     // Define target SDK version
}

buildscript {
    // Define Kotlin version INSIDE buildscript's ext block
    ext.kotlin_version = '1.9.22' // Match version declared in settings.gradle

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        // Define build tool dependencies
        classpath 'com.android.tools.build:gradle:8.6.1' // Updated to support androidx.core:core-ktx:1.16.0
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.4.2' // Updated version
    }
}

// Configurations applied to all projects (app and plugins)
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

// Set build directory for the root project
rootProject.buildDir = '../build'

// Set build directory for sub-projects (modules/plugins)
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}

// Configuration applied after sub-projects are evaluated
subprojects {
    project.configurations.all {
        // Your existing resolution strategy - keep if needed
        resolutionStrategy.eachDependency { details ->
            // Force androidx.camera libraries to use version 1.3.0
            if (details.requested.group == 'androidx.camera' &&
                details.requested.name.startsWith("camera-")) {
                details.useVersion "1.3.0"
            }
            // Force error_prone_annotations to a stable version
            if (details.requested.group == 'com.google.errorprone' &&
                details.requested.name == 'error_prone_annotations') {
                details.useVersion "2.10.0" // Or a newer compatible version if needed
            }
        }
    }
    // Removed afterEvaluate block
}


// Register a task to clean the build directory
tasks.register("clean", Delete) {
    delete rootProject.buildDir
}

