import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:shamil_mobile_app/feature/auth/data/authModel.dart'; // Import AuthModel

// Possible statuses for family connections
// 'external': Manually added non-app user
// 'pending_sent': Request sent by current user to an app user
// 'pending_received': Request received by current user from an app user
// 'accepted': Both users confirmed the link

class FamilyMember extends Equatable {
  final String id; // Firestore document ID
  final String name;
  final String relationship;
  final String? phone;
  final String? email;
  final String? gender;
  final String? nationalId;
  final String? userId; // UID if linked/accepted app user
  final String? profilePicUrl;
  final Timestamp? addedAt; // When added initially or request sent/accepted
  final String status; // Tracks connection status
  // *** ADDED: Date of Birth field ***
  final String? dob;

  const FamilyMember({
    required this.id,
    required this.name,
    required this.relationship,
    this.phone,
    this.email,
    this.gender,
    this.nationalId,
    this.userId,
    this.profilePicUrl,
    this.addedAt, // Make addedAt optional in constructor, set default in factory/map
    required this.status, // Make status required
    this.dob, // Added to constructor
  });

  factory FamilyMember.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>? ?? {};
    return FamilyMember(
      id: doc.id,
      name: data['name'] as String? ?? '',
      relationship: data['relationship'] as String? ?? '',
      phone: data['phone'] as String?,
      email: data['email'] as String?,
      gender: data['gender'] as String?,
      nationalId: data['nationalId'] as String?,
      userId: data['userId'] as String?,
      profilePicUrl: data['profilePicUrl'] as String?,
      addedAt: data['addedAt'] as Timestamp?, // Read timestamp or null
      status: data['status'] as String? ?? 'external', // Default to external
      // *** ADDED: Read dob from Firestore ***
      dob: data['dob'] as String?, // Assuming stored as String 'YYYY-MM-DD'
    );
  }

  // Creates a FamilyMember instance from an existing AuthModel (app user)
  // Used when preparing data for a request or after acceptance
  factory FamilyMember.fromAuthModel(AuthModel authUser, String relationship, String status, {Timestamp? addedAt}) {
     return FamilyMember(
        // ID will be generated by Firestore on add, or use authUser.uid if appropriate?
        // Using authUser.uid as ID here assumes the doc ID in the subcollection IS the target user's ID
        id: authUser.uid,
        name: authUser.name,
        relationship: relationship,
        phone: authUser.phone,
        email: authUser.email,
        gender: authUser.gender,
        nationalId: authUser.nationalId,
        userId: authUser.uid,
        profilePicUrl: authUser.profilePicUrl ?? authUser.image,
        addedAt: addedAt ?? Timestamp.now(), // Use provided or now
        status: status, // Set status explicitly
        dob: authUser.dob, // Get DOB from AuthModel
     );
  }


  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'relationship': relationship,
      'phone': phone,
      'email': email,
      'gender': gender,
      'nationalId': nationalId,
      'userId': userId,
      'profilePicUrl': profilePicUrl,
      // Use server timestamp if addedAt is null when writing
      'addedAt': addedAt ?? FieldValue.serverTimestamp(),
      'status': status,
      'dob': dob, // Added dob to map
    };
  }

  @override
  List<Object?> get props => [
        id, name, relationship, phone, email, gender, nationalId,
        userId, profilePicUrl, addedAt, status, dob // Added dob to props
      ];
}

