/// File: lib/feature/auth/data/bookable_service.dart
/// Represents a service or class that can be booked by time slots.
library; // Use library directive for better organization

import 'package:equatable/equatable.dart';

/// Represents a service or class that can be booked by time slots.
class BookableService extends Equatable {
  final String id; // Unique identifier for the service (can be auto-generated by Firestore)
  final String name; // Name of the service or class (e.g., "Personal Training", "Yoga Class")
  final String description; // Description of the service
  final int durationMinutes; // Duration of the service/slot in minutes
  final double price; // Price per booking/slot
  final int capacity; // Max number of people per slot (1 for individual appointments)
  // Add other relevant fields as needed:
  // final List<String>? requiredResources; // e.g., ["Yoga Mat", "Room A"]
  // final List<String>? associatedStaffUids; // Link to staff who can provide this service
  // final int bufferTimeMinutes; // Time needed before/after the service

  const BookableService({
    required this.id,
    required this.name,
    required this.description,
    required this.durationMinutes,
    required this.price,
    required this.capacity,
    // Initialize other fields here
  });

  /// Creates a BookableService instance from a map (e.g., Firestore data).
  /// Assumes the map key 'id' might exist, otherwise generates a placeholder.
  /// It's often better to let Firestore generate the ID upon adding the document.
  factory BookableService.fromMap(Map<String, dynamic> map) {
    return BookableService(
      // Use 'id' from map if present, otherwise consider how IDs are managed
      // If Firestore generates IDs, this 'id' field might represent the document ID
      // fetched separately or might not be stored within the map itself.
      // For parsing data *within* a list field where ID might be included:
      id: map['id']?.toString() ?? DateTime.now().millisecondsSinceEpoch.toString(), // Placeholder ID generation
      name: map['name'] as String? ?? '',
      description: map['description'] as String? ?? '',
      durationMinutes: (map['durationMinutes'] as num?)?.toInt() ?? 60, // Default 60 mins
      price: (map['price'] as num?)?.toDouble() ?? 0.0, // Default 0.0
      capacity: (map['capacity'] as num?)?.toInt() ?? 1, // Default capacity 1
      // Parse other fields here
    );
  }

  /// Converts the BookableService instance to a map for storage.
  /// Note: The 'id' field might not be needed here if Firestore auto-generates document IDs.
  Map<String, dynamic> toMap() {
    return {
      // 'id': id, // Include ID only if you are managing it manually within the map
      'name': name,
      'description': description,
      'durationMinutes': durationMinutes,
      'price': price,
      'capacity': capacity,
      // Add other fields here
    };
  }

  /// Creates a copy of the instance with optional updated fields.
  BookableService copyWith({
    String? id,
    String? name,
    String? description,
    int? durationMinutes,
    double? price,
    int? capacity,
    // Add other fields here
  }) {
    return BookableService(
      id: id ?? this.id,
      name: name ?? this.name,
      description: description ?? this.description,
      durationMinutes: durationMinutes ?? this.durationMinutes,
      price: price ?? this.price,
      capacity: capacity ?? this.capacity,
      // Handle other fields in copyWith
    );
  }

  @override
  List<Object?> get props => [
    id,
    name,
    description,
    durationMinutes,
    price,
    capacity,
    // Add other fields to props
  ];

  @override
  String toString() {
    return 'BookableService(id: $id, name: $name, duration: $durationMinutes min, price: $price, capacity: $capacity)';
  }
}
